import React, { useState, useEffect } from "react";
import axios from "axios";
import { backendUrl } from "../App";
import { toast } from "react-toastify";

const ImportProducts = ({ token }) => {
  // State variables
  const [excelFile, setExcelFile] = useState(null);
  const [imageZip, setImageZip] = useState(null);
  const [importing, setImporting] = useState(false);
  const [importStatus, setImportStatus] = useState(null);
  const [statusPolling, setStatusPolling] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [loadingFiles, setLoadingFiles] = useState(false);
  const [imageFolders, setImageFolders] = useState([]);
  const [loadingFolders, setLoadingFolders] = useState(false);
  const [activeTab, setActiveTab] = useState('import'); // 'import', 'files', 'folders'
  
  // Handle Excel file selection
  const handleExcelChange = (e) => {
    const file = e.target.files[0];
    if (file && (file.name.endsWith('.xlsx') || file.name.endsWith('.xls'))) {
      setExcelFile(file);
    } else {
      toast.error("Please select a valid Excel file (.xlsx or .xls)");
      e.target.value = null;
    }
  };
  
  // Handle image zip file selection
  const handleImageZipChange = (e) => {
    const file = e.target.files[0];
    if (file && file.name.endsWith('.zip')) {
      setImageZip(file);
    } else {
      toast.error("Please select a valid ZIP file (.zip)");
      e.target.value = null;
    }
  };
  
  // Start import process
  const handleImport = async (e) => {
    e.preventDefault();
    
    if (!excelFile) {
      toast.error("Please select an Excel file");
      return;
    }
    
    try {
      setImporting(true);
      
      // Create form data
      const formData = new FormData();
      formData.append('excelFile', excelFile);
      if (imageZip) {
        formData.append('imageZip', imageZip);
      }
      
      // Start import
      console.log("Starting import with token:", token);
      const response = await axios.post(
        `${backendUrl}/api/import/products`,
        formData,
        {
          headers: {
            'Content-Type': 'multipart/form-data',
            token: `Bearer ${token}`
          }
        }
      );
      
      if (response.data.success) {
        toast.success("Import started successfully");
        setStatusPolling(true);
        setImportStatus(response.data.status || null);
      } else {
        toast.error(response.data.message || "Failed to start import");
        setImporting(false);
      }
      
    } catch (error) {
      console.error("Import error:", error);
      toast.error(error.response?.data?.message || "Import failed");
      setImporting(false);
    }
  };
  
  // Fetch uploaded files
  const fetchUploadedFiles = async () => {
    try {
      setLoadingFiles(true);
      const response = await axios.get(
        `${backendUrl}/api/import/files`,
        {
          headers: { token: `Bearer ${token}` }
        }
      );
      
      if (response.data.success) {
        setUploadedFiles(response.data.files || []);
      } else {
        console.error("Failed to fetch files:", response.data.message);
      }
    } catch (error) {
      console.error("Error fetching files:", error);
      toast.error("Failed to load uploaded files");
    } finally {
      setLoadingFiles(false);
    }
  };
  
  // Delete an uploaded file
  const handleDeleteFile = async (filename) => {
    if (!confirm(`Are you sure you want to delete ${filename}?`)) {
      return;
    }
    
    try {
      const response = await axios.delete(
        `${backendUrl}/api/import/files/${filename}`,
        {
          headers: { token: `Bearer ${token}` }
        }
      );
      
      if (response.data.success) {
        toast.success("File deleted successfully");
        fetchUploadedFiles(); // Refresh the file list
      } else {
        toast.error(response.data.message || "Failed to delete file");
      }
    } catch (error) {
      console.error("Delete error:", error);
      toast.error(error.response?.data?.message || "Failed to delete file");
    }
  };
  
  // Fetch image folders
  const fetchImageFolders = async () => {
    try {
      setLoadingFolders(true);
      const response = await axios.get(
        `${backendUrl}/api/import/folders`,
        {
          headers: { token: `Bearer ${token}` }
        }
      );
      
      if (response.data.success) {
        setImageFolders(response.data.folders || []);
      } else {
        console.error("Failed to fetch folders:", response.data.message);
      }
    } catch (error) {
      console.error("Error fetching folders:", error);
      toast.error("Failed to load image folders");
    } finally {
      setLoadingFolders(false);
    }
  };
  
  // Delete an image folder
  const handleDeleteImageFolder = async (folderName) => {
    if (!confirm(`Are you sure you want to delete the folder ${folderName}?`)) {
      return;
    }
    
    try {
      const response = await axios.delete(
        `${backendUrl}/api/import/folders/${folderName}`,
        {
          headers: { token: `Bearer ${token}` }
        }
      );
      
      if (response.data.success) {
        toast.success("Folder deleted successfully");
        fetchImageFolders(); // Refresh the folders list
      } else {
        toast.error(response.data.message || "Failed to delete folder");
      }
    } catch (error) {
      console.error("Delete folder error:", error);
      toast.error(error.response?.data?.message || "Failed to delete folder");
    }
  };
  
  // Load uploaded files on component mount
  useEffect(() => {
    if (token) {
      fetchUploadedFiles();
    }
  }, [token]);
  
  // Poll for import status updates
  useEffect(() => {
    let interval;
    
    if (statusPolling) {
      interval = setInterval(async () => {
        try {
          const response = await axios.get(
            `${backendUrl}/api/import/status`,
            {
              headers: { token: `Bearer ${token}` }
            }
          );
          
          setImportStatus(response.data.status);
          
          // Stop polling if import is complete
          if (!response.data.status.inProgress) {
            setStatusPolling(false);
            setImporting(false);
            
            if (response.data.status.errors === 0) {
              toast.success("Import completed successfully");
            } else {
              toast.info(`Import completed with ${response.data.status.errors} errors`);
            }
          }
          
        } catch (error) {
          console.error("Status update error:", error);
          setStatusPolling(false);
          setImporting(false);
        }
      }, 2000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [statusPolling, token]);
  
  return (
    <main className="p-6 max-w-screen-2xl mx-auto bg-gradient-to-b from-indigo-50 to-white min-h-screen">
      <div className="max-w-7xl mx-auto">
        {/* Page Header */}
        <div className="mb-8 flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-indigo-900">Product Import Manager</h1>
            <p className="text-indigo-700 mt-2">Import, manage, and track your product uploads</p>
          </div>
          <div className="bg-white px-4 py-2 rounded-lg shadow-sm flex items-center space-x-2 text-indigo-800">
            <span className="font-medium">Import Status:</span>
            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
              importing ? 'bg-indigo-100 text-indigo-800' : 'bg-green-100 text-green-800'
            }`}>
              {importing ? 'Active Import' : 'Ready'}
            </span>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="mb-8 border-b border-indigo-200">
          <nav className="flex space-x-8">
            <button
              onClick={() => setActiveTab('import')}
              className={`pb-4 px-1 ${
                activeTab === 'import' 
                  ? 'border-b-2 border-indigo-600 text-indigo-600 font-medium' 
                  : 'text-indigo-400 hover:text-indigo-600'
              }`}
            >
              Import Products
            </button>
            <button
              onClick={() => {
                setActiveTab('files');
                fetchUploadedFiles();
              }}
              className={`pb-4 px-1 ${
                activeTab === 'files' 
                  ? 'border-b-2 border-indigo-600 text-indigo-600 font-medium' 
                  : 'text-indigo-400 hover:text-indigo-600'
              }`}
            >
              Excel Files
            </button>
            <button
              onClick={() => {
                setActiveTab('folders');
                fetchImageFolders();
              }}
              className={`pb-4 px-1 ${
                activeTab === 'folders' 
                  ? 'border-b-2 border-indigo-600 text-indigo-600 font-medium' 
                  : 'text-indigo-400 hover:text-indigo-600'
              }`}
            >
              Image Folders
            </button>
          </nav>
        </div>
        
        {/* Import Products Tab */}
        {activeTab === 'import' && (
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Import Form */}
          <div className="bg-white rounded-xl shadow-lg p-8 border border-indigo-100">
            <h2 className="text-2xl font-bold text-indigo-900 mb-6">Upload Product Data</h2>
            
            <form onSubmit={handleImport} className="space-y-8">
              {/* Excel File Input */}
              <div className="space-y-3">
                <label className="block text-base font-semibold text-indigo-800">
                  Excel File <span className="text-purple-500">*</span>
                </label>
                <div className="relative">
                  <input
                    type="file"
                    accept=".xlsx,.xls"
                    onChange={handleExcelChange}
                    className="block w-full text-sm text-indigo-500 file:mr-4 file:py-3 file:px-6 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-indigo-600 file:text-white hover:file:bg-indigo-700 file:transition-colors file:duration-200 focus:outline-none"
                    disabled={importing}
                    required
                  />
                  <div className="mt-3 bg-indigo-50 rounded-lg p-3">
                    <p className="text-xs text-indigo-600 font-medium">
                      Allowed file types: .xlsx, .xls
                    </p>
                    <p className="text-xs text-indigo-600">
                      Filename format: branded_frames.xlsx, branded_sunglasses.xlsx, or contact_lenses.xlsx
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Image Zip Input */}
              <div className="space-y-3">
                <label className="block text-base font-semibold text-indigo-800">
                  Product Images (ZIP File)
                </label>
                <div className="relative">
                  <input
                    type="file"
                    accept=".zip"
                    onChange={handleImageZipChange}
                    className="block w-full text-sm text-indigo-500 file:mr-4 file:py-3 file:px-6 file:rounded-lg file:border-0 file:text-sm file:font-medium file:bg-indigo-600 file:text-white hover:file:bg-indigo-700 file:transition-colors file:duration-200 focus:outline-none"
                    disabled={importing}
                  />
                  <div className="mt-3 bg-indigo-50 rounded-lg p-3">
                    <p className="text-xs text-indigo-600">
                      Image files should be named to match the Model No. in your Excel file (e.g., <span className="font-mono bg-indigo-100 px-1 rounded">VPR63U.jpg</span>)
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Instructions */}
              <div className="bg-gradient-to-r from-purple-50 to-indigo-50 p-6 rounded-xl border border-indigo-100 shadow-sm">
                <h3 className="font-bold text-indigo-900 mb-3 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                  Format Requirements
                </h3>
                <ul className="space-y-2 text-sm text-indigo-800">
                  <li className="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mt-0.5 mr-2 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    Required columns: Brand, Product, Material, Shape, Gender, Frame Type, Model No., Color, Color Text, Size, Price, Stock
                  </li>
                  <li className="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mt-0.5 mr-2 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    Description is optional (system will generate if empty)
                  </li>
                  <li className="flex items-start">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mt-0.5 mr-2 text-indigo-600" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    Missing images will use a placeholder automatically
                  </li>
                </ul>
              </div>
              
              {/* Submit Button */}
              <div>
                <button
                  type="submit"
                  className="w-full flex justify-center py-3 px-6 rounded-lg shadow-md text-base font-medium text-white bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
                  disabled={importing || !excelFile}
                >
                  {importing ? (
                    <div className="flex items-center">
                      <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Processing Import...
                    </div>
                  ) : "Start Product Import"}
                </button>
              </div>
            </form>
          </div>
          
          {/* Status Display */}
          <div className="bg-white rounded-xl shadow-lg p-8 border border-indigo-100">
            <h2 className="text-2xl font-bold text-indigo-900 mb-6">Import Status</h2>
            
            {!importStatus ? (
              <div className="flex flex-col items-center justify-center py-12 bg-indigo-50 rounded-xl">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-indigo-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                </svg>
                <p className="text-indigo-800 font-medium text-lg">No Import Activity</p>
                <p className="text-indigo-600 mt-2 text-sm">Start an import to view real-time status</p>
              </div>
            ) : (
              <div className="space-y-8">
                {/* Status Cards */}
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gradient-to-br from-indigo-50 to-purple-50 p-4 rounded-xl border border-indigo-100">
                    <p className="text-xs font-medium text-indigo-700 uppercase tracking-wider">Product Type</p>
                    <p className="text-xl font-bold text-indigo-900 mt-1">{importStatus.category || "Unknown"}</p>
                  </div>
                  <div className="bg-gradient-to-br from-indigo-50 to-purple-50 p-4 rounded-xl border border-indigo-100">
                    <p className="text-xs font-medium text-indigo-700 uppercase tracking-wider">Status</p>
                    <p className="text-xl font-bold mt-1">
                      {importStatus.inProgress ? (
                        <span className="text-indigo-600">In Progress</span>
                      ) : (
                        <span className="text-purple-700">Complete</span>
                      )}
                    </p>
                  </div>
                </div>
                
                {/* Progress Bar */}
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium text-indigo-900">Overall Progress</span>
                    <span className="text-sm font-bold text-indigo-900">{importStatus.completionPercentage}%</span>
                  </div>
                  <div className="w-full bg-indigo-100 rounded-full h-3">
                    <div
                      className="bg-gradient-to-r from-indigo-600 to-purple-600 h-3 rounded-full shadow-inner transition-all duration-500 ease-in-out"
                      style={{ width: `${importStatus.completionPercentage}%` }}
                    ></div>
                  </div>
                </div>
                
                {/* Stats Cards */}
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4">
                  <div className="bg-white p-4 rounded-xl border border-indigo-100 shadow-sm">
                    <div className="flex flex-col items-center">
                      <span className="text-2xl font-bold text-indigo-900">{importStatus.processed}</span>
                      <span className="text-xs font-medium text-indigo-700 uppercase tracking-wider mt-1">Processed</span>
                    </div>
                  </div>
                  <div className="bg-white p-4 rounded-xl border border-green-100 shadow-sm">
                    <div className="flex flex-col items-center">
                      <span className="text-2xl font-bold text-green-600">{importStatus.imported}</span>
                      <span className="text-xs font-medium text-green-700 uppercase tracking-wider mt-1">Imported</span>
                    </div>
                  </div>
                  <div className="bg-white p-4 rounded-xl border border-amber-100 shadow-sm">
                    <div className="flex flex-col items-center">
                      <span className="text-2xl font-bold text-amber-600">{importStatus.skipped}</span>
                      <span className="text-xs font-medium text-amber-700 uppercase tracking-wider mt-1">Skipped</span>
                    </div>
                  </div>
                  <div className="bg-white p-4 rounded-xl border border-red-100 shadow-sm">
                    <div className="flex flex-col items-center">
                      <span className="text-2xl font-bold text-red-600">{importStatus.errors}</span>
                      <span className="text-xs font-medium text-red-700 uppercase tracking-wider mt-1">Errors</span>
                    </div>
                  </div>
                </div>
                
                {/* Time Counter */}
                <div className="bg-gradient-to-r from-indigo-50 to-purple-50 p-4 rounded-xl border border-indigo-100 flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-indigo-700" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clipRule="evenodd" />
                  </svg>
                  <span className="text-sm font-semibold text-indigo-900">Time Elapsed: {importStatus.elapsedTime} seconds</span>
                </div>
                
                {/* Activity Log */}
                <div>
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="text-base font-semibold text-indigo-900">Activity Log</h3>
                    <span className="text-xs font-medium text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full">Live Updates</span>
                  </div>
                  <div className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-xl p-4 h-[250px] overflow-y-auto border border-indigo-100 shadow-inner">
                    {importStatus.logs && importStatus.logs.length > 0 ? (
                      <div className="space-y-2">
                        {importStatus.logs.map((log, index) => (
                          <div key={index} className={`
                            font-mono text-xs px-3 py-2 rounded-lg
                            ${log.includes('✅') ? 'bg-green-100 text-green-800' : ''}
                            ${log.includes('❌') ? 'bg-red-100 text-red-800' : ''}
                            ${log.includes('⚠️') ? 'bg-amber-100 text-amber-800' : ''}
                            ${log.includes('🖼️') ? 'bg-blue-100 text-blue-800' : ''}
                            ${log.includes('📊') ? 'bg-purple-100 text-purple-800' : ''}
                            ${log.includes('⏭️') ? 'bg-gray-100 text-gray-800' : ''}
                            ${!log.includes('✅') && !log.includes('❌') && !log.includes('⚠️') && !log.includes('🖼️') && !log.includes('📊') && !log.includes('⏭️') ? 'bg-white text-indigo-800' : ''}
                          `}>
                            {log}
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="flex items-center justify-center h-full">
                        <p className="text-indigo-400">No logs available yet</p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
        )}
      
        {/* Results Summary (shows after completion) */}
        {importStatus && !importStatus.inProgress && importStatus.endTime && activeTab === 'import' && (
          <div className="mt-8 bg-gradient-to-br from-green-50 to-emerald-50 p-8 rounded-xl border border-green-200 shadow-lg">
            <div className="flex items-center mb-6">
              <div className="flex-shrink-0 h-12 w-12 bg-green-100 rounded-full flex items-center justify-center mr-4">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-green-900">Import Complete</h2>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div className="bg-white p-6 rounded-xl shadow-sm border border-green-100">
                <h3 className="text-lg font-semibold text-green-800 mb-4 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M2 10a8 8 0 018-8v8h8a8 8 0 11-16 0z" />
                    <path d="M12 2.252A8.014 8.014 0 0117.748 8H12V2.252z" />
                  </svg>
                  Summary Statistics
                </h3>
                <ul className="space-y-3">
                  <li className="flex justify-between">
                    <span className="text-green-700">Category:</span>
                    <span className="font-medium text-green-900">{importStatus.category}</span>
                  </li>
                  <li className="flex justify-between">
                    <span className="text-green-700">Total Processed:</span>
                    <span className="font-medium text-green-900">{importStatus.processed}</span>
                  </li>
                  <li className="flex justify-between">
                    <span className="text-green-700">Successfully Imported:</span>
                    <span className="font-medium text-green-900">{importStatus.imported}</span>
                  </li>
                  <li className="flex justify-between">
                    <span className="text-green-700">Skipped (Already Exists):</span>
                    <span className="font-medium text-green-900">{importStatus.skipped}</span>
                  </li>
                  <li className="flex justify-between">
                    <span className="text-green-700">Errors:</span>
                    <span className="font-medium text-green-900">{importStatus.errors}</span>
                  </li>
                  <li className="flex justify-between border-t pt-2 mt-2 border-green-100">
                    <span className="text-green-700">Time Taken:</span>
                    <span className="font-medium text-green-900">{importStatus.elapsedTime} seconds</span>
                  </li>
                </ul>
              </div>
              <div className="bg-white p-6 rounded-xl shadow-sm border border-green-100">
                <h3 className="text-lg font-semibold text-green-800 mb-4 flex items-center">
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-green-600" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z" clipRule="evenodd" />
                  </svg>
                  Next Steps
                </h3>
                <ul className="space-y-4">
                  <li className="flex items-start">
                    <div className="flex-shrink-0 h-6 w-6 bg-green-100 rounded-full flex items-center justify-center mr-2 mt-0.5">
                      <span className="text-green-600 text-sm font-bold">1</span>
                    </div>
                    <div>
                      <p className="text-green-800">View all imported products in the <a href="/list" className="font-medium text-green-600 underline hover:text-green-800 transition-colors">Products List</a></p>
                    </div>
                  </li>
                  <li className="flex items-start">
                    <div className="flex-shrink-0 h-6 w-6 bg-green-100 rounded-full flex items-center justify-center mr-2 mt-0.5">
                      <span className="text-green-600 text-sm font-bold">2</span>
                    </div>
                    <div>
                      <p className="text-green-800">Products are now live on your store website</p>
                    </div>
                  </li>
                  <li className="flex items-start">
                    <div className="flex-shrink-0 h-6 w-6 bg-green-100 rounded-full flex items-center justify-center mr-2 mt-0.5">
                      <span className="text-green-600 text-sm font-bold">3</span>
                    </div>
                    <div>
                      <p className="text-green-800">Update missing images by uploading a new zip file with matching image names</p>
                    </div>
                  </li>
                </ul>
                <div className="mt-6 flex">
                  <a href="/list" className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                    View Products
                    <svg xmlns="http://www.w3.org/2000/svg" className="ml-2 -mr-1 h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Excel Files Tab */}
        {activeTab === 'files' && (
        <div className="bg-white rounded-xl shadow-lg p-8 border border-indigo-100">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h2 className="text-2xl font-bold text-indigo-900">Uploaded Excel Files</h2>
              <p className="text-indigo-600 mt-1">Manage previously uploaded product data files</p>
            </div>
            <button 
              onClick={fetchUploadedFiles}
              className="flex items-center px-5 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow-sm transition-colors duration-150"
              disabled={loadingFiles}
            >
              {loadingFiles ? (
                <><svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>Loading...</>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Refresh
                </>
              )}
            </button>
          </div>
          
          {loadingFiles ? (
            <div className="flex flex-col items-center justify-center py-12 bg-indigo-50 rounded-xl">
              <svg className="animate-spin h-10 w-10 text-indigo-400 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="text-indigo-800 font-medium text-lg">Loading Files</p>
              <p className="text-indigo-600 mt-1">Please wait while we fetch your uploaded files</p>
            </div>
          ) : uploadedFiles.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-12 bg-indigo-50 rounded-xl border border-dashed border-indigo-200">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-indigo-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <p className="text-indigo-800 font-medium text-lg">No Excel Files Found</p>
              <p className="text-indigo-600 mt-1">Upload product data to see files here</p>
              <button
                onClick={() => setActiveTab('import')}
                className="mt-6 px-5 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow-sm transition-colors duration-150"
              >
                Go to Import
              </button>
            </div>
          ) : (
            <div className="overflow-hidden rounded-xl shadow-sm border border-indigo-100">
              <table className="min-w-full divide-y divide-indigo-100">
                <thead className="bg-gradient-to-r from-indigo-50 to-purple-50">
                  <tr>
                    <th scope="col" className="px-6 py-3.5 text-left text-xs font-semibold text-indigo-800 uppercase tracking-wider">
                      Filename
                    </th>
                    <th scope="col" className="px-6 py-3.5 text-left text-xs font-semibold text-indigo-800 uppercase tracking-wider">
                      Upload Date
                    </th>
                    <th scope="col" className="px-6 py-3.5 text-left text-xs font-semibold text-indigo-800 uppercase tracking-wider">
                      Size
                    </th>
                    <th scope="col" className="px-6 py-3.5 text-left text-xs font-semibold text-indigo-800 uppercase tracking-wider">
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-indigo-100">
                  {uploadedFiles.map((file, index) => (
                    <tr key={index} className="hover:bg-indigo-50 transition-colors duration-150">
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-indigo-500 mr-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          <span className="font-medium text-indigo-900">{file.name}</span>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-indigo-700">
                        {new Date(file.created).toLocaleString()}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        <span className="px-3 py-1 inline-flex text-xs leading-5 font-medium bg-indigo-100 text-indigo-800 rounded-full">
                          {Math.round(file.size / 1024)} KB
                        </span>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <button
                          onClick={() => handleDeleteFile(file.name)}
                          className="text-red-500 hover:text-red-700 flex items-center transition-colors duration-150"
                        >
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                          </svg>
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
        )}
        
        {/* Image Folders Tab */}
        {activeTab === 'folders' && (
        <div className="bg-white rounded-xl shadow-lg p-8 border border-indigo-100">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h2 className="text-2xl font-bold text-indigo-900">Image Folders</h2>
              <p className="text-indigo-600 mt-1">Manage product image directories</p>
            </div>
            <button 
              onClick={fetchImageFolders}
              className="flex items-center px-5 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow-sm transition-colors duration-150"
              disabled={loadingFolders}
            >
              {loadingFolders ? (
                <><svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>Loading...</>
              ) : (
                <>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  Refresh
                </>
              )}
            </button>
          </div>
          
          {loadingFolders ? (
            <div className="flex flex-col items-center justify-center py-12 bg-indigo-50 rounded-xl">
              <svg className="animate-spin h-10 w-10 text-indigo-400 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="text-indigo-800 font-medium text-lg">Loading Folders</p>
              <p className="text-indigo-600 mt-1">Please wait while we fetch your image folders</p>
            </div>
          ) : imageFolders.length === 0 ? (
            <div className="flex flex-col items-center justify-center py-12 bg-indigo-50 rounded-xl border border-dashed border-indigo-200">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-indigo-300 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
              </svg>
              <p className="text-indigo-800 font-medium text-lg">No Image Folders Found</p>
              <p className="text-indigo-600 mt-1">Upload product images to see folders here</p>
              <button
                onClick={() => setActiveTab('import')}
                className="mt-6 px-5 py-2 bg-indigo-600 hover:bg-indigo-700 text-white rounded-lg shadow-sm transition-colors duration-150"
              >
                Go to Import
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {imageFolders.map((folder, index) => (
                <div key={index} className="bg-gradient-to-br from-indigo-50 to-purple-50 rounded-xl overflow-hidden border border-indigo-100 shadow-sm hover:shadow-md transition-shadow duration-200">
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="w-12 h-12 flex items-center justify-center bg-indigo-100 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                      <span className="px-3 py-1 bg-indigo-100 text-indigo-800 text-xs font-medium rounded-full">
                        {folder.fileCount} files
                      </span>
                    </div>
                    
                    <h3 className="font-semibold text-lg text-indigo-900 mb-1 truncate">{folder.name}</h3>
                    <p className="text-xs text-indigo-700 mb-4">Created: {new Date(folder.created).toLocaleString()}</p>
                    
                    <div className="flex justify-end">
                      <button
                        onClick={() => handleDeleteImageFolder(folder.name)}
                        className="flex items-center text-sm font-medium text-red-500 hover:text-red-700 transition-colors duration-150"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                        </svg>
                        Delete Folder
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
        )}
      </div>
    </main>
  );
};

export default ImportProducts;
